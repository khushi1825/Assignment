class Pair implements Comparable<Pair>
{
    int val;
    int freq;
    public Pair(int val,int freq)
    {
        this.val=val;
        this.freq=freq;
    }
     @Override
     public int compareTo(Pair p)
     {
        return this.freq - p.freq;
     }
}
class Solution {
    public int[] topKFrequent(int[] nums, int k) 
    {
        if(nums.length==1)
        return nums;
        PriorityQueue<Pair> pq=new PriorityQueue<>(Collections.reverseOrder());
        Arrays.sort(nums);
        int count=1;
        int temp=nums[0];
        int i;
        for(i=1;i<nums.length;i++)
        {
            if(temp==nums[i])
            {
                count++;
            }
            else
            {
                pq.offer(new Pair(temp,count));
                temp=nums[i];
                count=1;
            }
        }
        pq.offer(new Pair(temp,count));

        int ans[]=new int[k];
        i=0;
        while(k-->0 && !pq.isEmpty())
        {
            ans[i++]=pq.poll().val;
        }
        return ans;
    }
}
