class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
        ArrayList<Integer> ans=new ArrayList<>(); 
        int v=adj.size();
        
        boolean vis[]=new boolean[v];
        for(int i=0;i<adj.size();i++){
            if(!vis[i]){
                dfs(adj,0,vis,ans);
            }
        }
        
        return ans;
    }
    
    void dfs(ArrayList<ArrayList<Integer>> adj,int node,boolean [] vis,ArrayList<Integer> ans){
        vis[node]=true;
        ans.add(node);
        for(int nei:adj.get(node)){
            if(!vis[nei]){
                dfs(adj,nei,vis,ans);
            }
        }
    }
}
