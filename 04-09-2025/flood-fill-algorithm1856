class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        // Code here
        int rows = image.length;
        int cols = image[0].length;
        int oldColor = image[sr][sc];
        boolean[][] visited = new boolean[rows][cols];

        if (oldColor == newColor){
            return image;
        }

        dfs(image, sr, sc, rows, cols, oldColor, newColor, visited);
        
        return image;
    }
    
    static void dfs(int[][] image, int r, int c, int rows, int cols,int oldColor, int newColor, boolean[][] visited) {
        
      if (r < 0 || c < 0 || r >= rows || c >= cols ||
            visited[r][c] || image[r][c] != oldColor) {
            return;
        }

        visited[r][c] = true;
        image[r][c] = newColor;

        int dr[] = {0, 1, 0, -1};
        int dc[] = {1, 0, -1, 0};

        for (int i = 0; i < dr.length; i++) {
            dfs(image, r + dr[i], c + dc[i], rows, cols, oldColor, newColor, visited);
        }
    }
}
