// User function Template for Java

class Solution {
    static void dfs(int r, int c, char[][] mat, boolean[][] visited, int n, int m) {
        visited[r][c] = true;
        
        int[] dr = {1, -1, 0, 0};
        int[] dc = {0, 0, 1, -1};
        
        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i];
            int nc = c + dc[i];
            
            if (nr >= 0 && nr < n && nc >= 0 && nc < m && 
                !visited[nr][nc] && mat[nr][nc] == 'O') {
                dfs(nr, nc, mat, visited, n, m);
            }
        }
    }
    
    static char[][] fill(char mat[][]) {
        int n = mat.length;
        int m = mat[0].length;
        boolean[][] visited = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            if (mat[i][0] == 'O' && !visited[i][0]) dfs(i, 0, mat, visited, n, m);
            if (mat[i][m - 1] == 'O' && !visited[i][m - 1]) dfs(i, m - 1, mat, visited, n, m);
        }
        
        for (int j = 0; j < m; j++) {
            if (mat[0][j] == 'O' && !visited[0][j]) dfs(0, j, mat, visited, n, m);
            if (mat[n - 1][j] == 'O' && !visited[n - 1][j]) dfs(n - 1, j, mat, visited, n, m);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 'O' && !visited[i][j]) {
                    mat[i][j] = 'X'; 
                }
            }
        }
        
        return mat;
    }
}
