class Solution {
    static class point {
        int x;
        int y;
        int dist;
        point(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }

    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<point> pq = new PriorityQueue<>((a, b) -> a.dist - b.dist);
        for (int i = 0; i < points.length; i++) {
            int dist = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            pq.add(new point(points[i][0], points[i][1], dist));
        }

        int[][] res = new int[k][2];
        int idx = 0;
        while (k > 0) {
            point temp = pq.poll();
            res[idx][0] = temp.x;
            res[idx][1] = temp.y;
            idx++;
            k--; 
        }
        return res;
    }
}
